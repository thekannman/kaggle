#library('e1071')
library(lubridate)
#library('randomForest')
#library('cvTools')
library(caret)
library(caretEnsemble)
library(Metrics)
library(doMC)
registerDoMC(cores=1)
logloss <- function (data, lev = NULL, model = NULL) {
    LogLos <- function(actual, pred, eps = 1e-15) {
        stopifnot(all(dim(actual) == dim(pred)))
        pred[pred < eps] <- eps
        pred[pred > 1 - eps] <- 1 - eps
        -sum(actual * log(pred)) / nrow(pred)
    }
    if (is.character(data$obs)) data$obs <- factor(data$obs, levels = lev)
    pred <- data[, "pred"]
    obs <- data[, "obs"]
    isNA <- is.na(pred)
    pred <- pred[!isNA]
    obs <- obs[!isNA]
    data <- data[!isNA, ]
    cls <- levels(obs)
    if (length(obs) + length(pred) == 0) {
        out <- rep(NA, 2)
    } else {
        pred <- factor(pred, levels = levels(obs))
        require("e1071")
        out <- unlist(e1071::classAgreement(table(obs, pred)))[c("diag", "kappa")]
        probs <- data[, cls]
        actual <- model.matrix(~ obs - 1)
        out2 <- LogLos(actual = actual, pred = probs)
    }
    out <- c(out, out2)
    names(out) <- c("Accuracy", "Kappa", "LogLoss")
    if (any(is.nan(out))) out[is.nan(out)] <- NA
    out
}
rfFuncs$summary = logloss
train <- read.csv(gzfile("../train_nofourbit.gz"))
test <- read.csv(gzfile("../test_nofourbit.gz"))
train_labels <- read.csv("../trainLabels.csv")
eolnames(train)[1] = "Id"
train_new <- merge(train, train_labels, by="Id")
colnames(train)[1] = "Id"
train_new <- merge(train, train_labels, by="Id")
train_cols<-train_new[,c(2:260)]
train_cols$max <- apply(train_cols[4:259],1,max)
train_cols$min <- apply(train_cols[4:259],1,min)
#train_cols$which.min = as.factor(apply(train_cols[4:259],1,which.min))
#train_cols$which.max = as.factor(apply(train_cols[4:259],1,which.max))
train_cols$med <- apply(train_cols[4:259],1,median)
train_cols$sd <- apply(train_cols[4:259],1,sd)
for (i in 1:256)
{
    col.name <- paste("order",i,sep="")
    train_cols[,col.name] <- 0.0
}
for (i in 1:nrow(train_cols))
{
    train_cols[i,266:521] <- train_cols[i,colnames(sort(train_cols[i,4:259]))]
}
train_cols[i,colnames(sort(train_cols[i,4:259]))]
i
 train_cols[i,266:521] <- train_cols[i,colnames(sort(train_cols[i,4:259]))]
 train_cols[i,266:521]
colnames(train_cols)
for (i in 1:nrow(train_cols))
{
    train_cols[i,264:519] <- train_cols[i,colnames(sort(train_cols[i,4:259]))]
}
labels<-train_new[,261]
labels<-as.factor(paste("X",labels,sep=""))
testdata<-test[,2:260]
ctrl <- trainControl(method="cv", number=10, classProbs=T, savePred=T, summaryFunction = logloss)
tuneGrid <- data.frame(mtry=130)
mod <- train(x=as.matrix(train_cols),y=labels,method="rf",trControl=ctrl, ntree=501, tuneGrid=tuneGrid, maximize=F,metric='LogLoss')
mod
predictions<-as.data.frame(predict(mod,newdata=testdata, type="prob"))
submit<-as.data.frame(cbind(test[,1],predictions))
colnames(submit)<-c("Id","Prediction1","Prediction2","Prediction3","Prediction4","Prediction5","Prediction6","Prediction7","Prediction8","Prediction9")
rite.csv(submit,format(Sys.time(), "%m-%d_%H:%M_submission.csv"),row.names=FALSE,quote=FALSE)
testdata<-test[,2:260]
testdata$max <- apply(testdata[4:259],1,max)
testdata$min <- apply(testdata[4:259],1,min)
testdata$med <- apply(testdata[4:259],1,median)
testdata$sd <- apply(testdata[4:259],1,sd)
for (i in 1:256)
{
    col.name <- paste("order",i,sep="")
    testdata[,col.name] <- 0.0
}
for (i in 1:nrow(train_cols))
{
    testdata[i,264:519] <- testdata[i,colnames(sort(testdata[i,4:259]))]
}
predictions<-as.data.frame(predict(mod,newdata=testdata, type="prob"))
submit<-as.data.frame(cbind(test[,1],predictions))
colnames(submit)<-c("Id","Prediction1","Prediction2","Prediction3","Prediction4","Prediction5","Prediction6","Prediction7","Prediction8","Prediction9")
rite.csv(submit,format(Sys.time(), "%m-%d_%H:%M_submission.csv"),row.names=FALSE,quote=FALSE)
write.csv(submit,format(Sys.time(), "%m-%d_%H:%M_submission.csv"),row.names=FALSE,quote=FALSE)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(train_cols,labels,rfeControl=control)
results
results <- rfe(train_cols,labels,sizes=c(16,32,64,128),rfeControl=control)
results
head(results$variables)
head(results$variables[10:11])
head(results$variables[10:11],n=20)
train_cols$var[1:32]
results$variables$var[1:32]
train_cols2 <- train_cols[results$variables$var[1:32]]
tarin_cols2
mod <- train(x=as.matrix(train_cols2),y=labels,method="rf",trControl=ctrl, ntree=5001, tuneGrid=tuneGrid, maximize=F,metric='LogLoss')
testdata2 <- testdata[results$variables$var[1:32]]
predictions <- as.data.frame(predict(mod,newdata=testdata2,type="prob"))
submit<-as.data.frame(cbind(test[,1],predictions))
colnames(submit)<-c("Id","Prediction1","Prediction2","Prediction3","Prediction4","Prediction5","Prediction6","Prediction7","Prediction8","Prediction9")
write.csv(submit,format(Sys.time(), "%m-%d_%H:%M_submission.csv"),row.names=FALSE,quote=FALSE)
warnings()
plot(train_cols$two_byte_sum,train_cols$file_size)
plot(train_cols$two_byte_sum,labels)
plot(train_col$no_que_mark,labels)
plot(train_cols$no_que_mark,labels)
train_cols$no_que_mark
plot(train_cols$no_que_mark/train_cols$two_byte_sum,labels)
train_cols$perc_que_mark <- train_cols$no_que_mark/train_cols$two_byte_sum
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,128),rfeControl=control)
is.na(train_cols$perc_que_mark)
is.na(train_cols)
sum(is.na(train_cols))
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,128),rfeControl=control)
control
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,128))
results <- rfe(train_cols,labels,sizes=c(16),rfeControl=control)
labels
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,128),rfeControl=control)
results <- rfe(train_cols2,labels,sizes=c(16,24,32,48,64,128),rfeControl=control)
results <- rfe(train_cols2,labels,sizes=c(16,24,32,48,64,128),rfeControl=control)
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,128),rfeControl=control)
sum(train_cols)
apply(train_cols,1,sum)
head(train_cols[,9395])
apply(train_cols,2,sum)
train_cols[,9395]
train_cols[9395]
train_cols[9395,]
plot(train_cols$no_que_mark/train_cols$two_byte_sum,labels)
plot(train_cols$no_que_mark/train_cols$file_size,labels)
plot(train_cols/train_cols$no_que_mark,labels)
plot(train_cols$two_byte_sum/train_cols$no_que_mark,labels)
train_cols$perc_que_mark <- train_cols$no_que_mark/train_cols$file_size
train_cols$two_over_que <- train_cols$two_byte_sum/train_cols$no_que_mark
plot(train_cols$max/train_cols$min,labels)
plot(train_cols$max/train_cols$med,labels)
train_cols$perc_que_mark <- train_cols$no_que_mark/train_cols$file_size
train_cols$two_over_que <- train_cols$two_byte_sum/train_cols$no_que_mark
train_cols$med_over_max <- train_cols$med/train_cols$max
train_cols$med_over_min <- train_cols$med/train_cols$min
train_cols$min_over_max <- train_cols$min/train_cols$max
train_cols$sd_over_max <- train_cols$sd/train_cols$max
train_cols$sd_over_med <- train_cols$sd/train_cols$med
train_cols$sd_over_min <- train_cols$sd/train_cols$min
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,128),rfeControl=control)
apply(train_cols,2,sum)
train_cols[train_cols=NA]
train_cols[train_cols=NAN]
train_cols[train_cols=NaN]
train_cols[is.nan(train_cols)]
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
train_cols[is.nan(train_cols)]
train_cols[is.nan(train_cols)] <- 0
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,128),rfeControl=control)
train_cols[is.nan(train_cols)]
train_cols[is.na(train_cols)]
is.in(train_cols)
apply(train_cols,2,sum)
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,128),rfeControl=control)
train_cols[is.infinite(train_cols)]
is.infinity.data.frame <- function(x)
do.call(cbind, lapply(x, is.infinity))
train_cols[is.infinite(train_cols)]
type(train_Cols)
type(train_cols)
typeof(train_cols)
is.infinity.list <- function(x)
do.call(cbind, lapply(x, is.infinity))
is.infinity.list <- function(x)
typeof(train_cols)
train_cols[tra]
train_cols[is.nan(train_cols)]
is.infinite(train_cols)
is.infinite(as.data.frame(train_cols))
do.call(data.frame,lapply(train_cols, function(x) replace(x, is.infinite(x),NA)))
do.call(data.frame,lapply(train_cols, function(x) replace(x, is.infinite(x),0)))
train_cols <- do.call(data.frame,lapply(train_cols, function(x) replace(x, is.infinite(x),0)))
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,128),rfeControl=control)
results
head(results$variables[10:11]
)
head(results$variables[10:11])
head(results$variables[10:11],n=30)
results
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,128),rfeControl=control,metric="LogLoss")
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,96,128),rfeControl=control,metric="LogLoss")
mod <- train(x=train_cols,y=labels,method="rf",trControl=ctrl, ntree=501, tuneGrid=tuneGrid, maximize=F,metric='LogLoss')
mod <- train(x=train_cols,y=labels,method="rf",trControl=ctrl, ntree=20001, tuneGrid=tuneGrid, maximize=F,metric='LogLoss')
results$variables$var[1:100]
mod <- train(x=train_cols[results$variables$var[1:100],y=labels,method="rf",trControl=ctrl, ntree=20001, tuneGrid=tuneGrid, maximize=F,metric='LogLoss')
train_cols[results$variables$var[1:100]
train_cols[results$variables$var[1:100]]
mod <- train(x=train_cols[results$variables$var[1:100]],y=labels,method="rf",trControl=ctrl, ntree=20001, tuneGrid=tuneGrid, maximize=F,metric='LogLoss')
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,96,128),rfeControl=control,metric="LogLoss")
mod <- train(x=train_cols[results$variables$var[1:100]],y=labels,method="rf",trControl=ctrl, ntree=20001, tuneGrid=tuneGrid, maximize=F,metric='LogLoss')
mod
testdata$perc_que_mark <- testdata$no_que_mark/testdata$file_size
testdata$two_over_que <- testdata$two_byte_sum/testdata$no_que_mark
testdata$med_over_max <- testdata$med/testdata$max
testdata$med_over_min <- testdata$med/testdata$min
testdata$min_over_max <- testdata$min/testdata$max
testdata$sd_over_max <- testdata$sd/testdata$max
testdata$sd_over_med <- testdata$sd/testdata$med
testdata$sd_over_min <- testdata$sd/testdata$min
testdata[is.nan(train_cols)] <- 0
testdata <- do.call(data.frame,lapply(testdata, function(x) replace(x, is.infinite(x),0)))
testdata$perc_que_mark <- testdata$no_que_mark/testdata$file_size
testdata$two_over_que <- testdata$two_byte_sum/testdata$no_que_mark
testdata$med_over_max <- testdata$med/testdata$max
testdata$med_over_min <- testdata$med/testdata$min
testdata$min_over_max <- testdata$min/testdata$max
testdata$sd_over_max <- testdata$sd/testdata$max
testdata$sd_over_med <- testdata$sd/testdata$med
testdata$sd_over_min <- testdata$sd/testdata$min
testdata[is.nan(testdata)] <- 0
testdata <- do.call(data.frame,lapply(testdata, function(x) replace(x, is.infinite(x),0)))
predictions<-as.data.frame(predict(mod,newdata=testdata[results$variables$var[1:100]], type="prob"))
submit<-as.data.frame(cbind(test[,1],predictions))
colnames(submit)<-c("Id","Prediction1","Prediction2","Prediction3","Prediction4","Prediction5","Prediction6","Prediction7","Prediction8","Prediction9")
write.csv(submit,format(Sys.time(), "%m-%d_%H:%M_submission.csv"),row.names=FALSE,quote=FALSE)
names(train_cols[,264:519]
)
train_cols[,264:519] <- as.factor(train_cols[,264:519])
as.factor(train_cols[,264:519])
train_cols[1,264:519]
i=1
train_cols[i,colnames(sort(train_cols[i,4:259]))]
train_cols[1,]
train_cols[5,]
sum(train_cols[1,264:519])
colnames(sort(train_cols[i,4:259])
colnames(sort(train_cols[i,4:259]))
two.byte.names <- colnames(train_cols[i,4:259])
two.byte.names <- colnames(train_cols[,4:259])
tw.byte.names
two.byte.names
colnames(sort(train_cols[i,4:259])
colnames(sort(train_cols[i,4:259]))
which(colnames(sort(train_cols[i,4:259])), %in% two.byte.names)
which(colnames(sort(train_cols[i,4:259])) %in% two.byte.names)
colnames(sort(train_cols[i,4:259]))
two.byte.names
which(colnames(sort(train_cols[i,4:259])) %in% two.byte.names)
match(colnames(sort(train_cols[i,4:259])) %in% two.byte.names)
match(colnames(sort(train_cols[i,4:259])), two.byte.names)
match(two.byte.names, colnames(sort(train_cols[i,4:259])))
match(colnames(sort(train_cols[i,4:259])), two.byte.names)
match(colnames(sort(train_cols[i,4:259])), two.byte.names)
match(colnames(sort(train_cols[i,4:259])), two.byte.names)two.byte.names <- colnames(train_cols[,4:259])
for (i in 1:nrow(train_cols))
{
    match(colnames(sort(train_cols[i,4:259])), two.byte.names)
}
two.byte.names <- colnames(train_cols[,4:259])
for (i in 1:nrow(train_cols))
{
    match(colnames(sort(train_cols[i,4:259])), two.byte.names)
}
for (i in 1:nrow(train_cols))
{
    train_cols[i,264:519] <-match(colnames(sort(train_cols[i,4:259])), two.byte.names)
}
for (i in 1:nrow(train_cols))
{
    train_cols[i,264:519] <- as.factor(match(colnames(sort(train_cols[i,4:259])), two.byte.names))
}
i=1
train_cols[i,264:519] <- as.factor(match(colnames(sort(train_cols[i,4:259])), two.byte.names))
train_cols[i,264:519]
train_cols[i,4:259]
max(train_cols[i,4:259])
match(two.byte.names, colnames(sort(train_cols[i,4:259])))
train_cols[i,4:259]
train_cols[i,4:259][204]
match(two.byte.names, colnames(sort(train_cols[i,4:259])))
match(two.byte.names, colnames(sort(train_cols[i,4:259], decreasing=T)))
two.byte.names <- colnames(train_cols[,4:259])
for (i in 1:nrow(train_cols))
{
    train_cols[i,264:519] <- match(two.byte.names, colnames(sort(train_cols[i,4:259], decreasing=T)))
}
train_cols[2,264:519]
train_cols[2,264:519][256]
train_cols[2,4:249][256]
train_cols[2,4:259][256]
train_cols[2,4:259][255]
train_cols[2,4:259][254]
train_cols[2,4:259][160]
results
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,96,128),rfeControl=control,metric="LogLoss")
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,96,128),rfeControl=control,metric="LogLoss", maximize=F)
results
results$variables[1:10,10:11]
results$variables[1:30,10:11]
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,96,128),rfeControl=control,metric="LogLoss", maximize=F,n.trees=10)
control
results <- rfe(train_cols,labels,sizes=c(16,24,32,48,64,96,128),rfeControl=control,metric="LogLoss", maximize=F,n.trees=10)
results
mod <- train(x=train_cols[results$variables$var[1:30],y=labels,method="rf",trControl=ctrl, ntree=50001, tuneGrid=tuneGrid, maximize=F,metric='LogLoss')
mod <- train(x=train_cols[results$variables$var[1:30]],y=labels,method="rf",trControl=ctrl, ntree=50001, tuneGrid=tuneGrid, maximize=F,metric='LogLoss')
mod <- train(x=train_cols[results$variables$var[1:30]],y=labels,method="rf",trControl=ctrl, ntree=5001, tuneGrid=tuneGrid, maximize=F,metric='LogLoss')
mod
tuneGrid
mod <- train(x=train_cols[results$variables$var[1:100]],y=labels,method="rf",trControl=ctrl, ntree=5001, maximize=F,metric='LogLoss')
mod
for (i in 1:nrow(train_cols))
{
    testdata[i,264:519] <- match(two.byte.names, colnames(sort(testdata[i,4:259], decreasing=T)))
}
predictions <- as.data.frame(predict(mod,newdata=testdata[results$variables$var[1:30]],type="prob"))
testdata$perc_que_mark <- testdata$no_que_mark/testdata$file_size
testdata$two_over_que <- testdata$two_byte_sum/testdata$no_que_mark
testdata$med_over_max <- testdata$med/testdata$max
testdata$med_over_min <- testdata$med/testdata$min
testdata$min_over_max <- testdata$min/testdata$max
testdata$sd_over_max <- testdata$sd/testdata$max
testdata$sd_over_med <- testdata$sd/testdata$med
testdata$sd_over_min <- testdata$sd/testdata$min
testdata[is.nan(testdata)] <- 0
testdata <- do.call(data.frame,lapply(testdata, function(x) replace(x, is.infinite(x),0)))
colnames(testdata)
predictions <- as.data.frame(predict(mod,newdata=testdata[results$variables$var[1:30]],type="prob"))
del testdata
colnames(train_cols)
colnames(testdata)
colnames(train_cols)
predictions <- as.data.frame(predict(mod,newdata=testdata[results$variables$var[1:100]],type="prob"))
submit<-as.data.frame(cbind(test[,1],predictions))
colnames(submit)<-c("Id","Prediction1","Prediction2","Prediction3","Prediction4","Prediction5","Prediction6","Prediction7","Prediction8","Prediction9")
write.csv(submit,format(Sys.time(), "%m-%d_%H:%M_submission.csv"),row.names=FALSE,quote=FALSE)
mod
results
results$variables[1:30,10:11]
as.hexmode(15)
as.hexmode(11)
1:2
1:(16*15)
as.hexmode(21)
as.hexmode(255)
as.hexmode(256)
as.hexmode(1)
as.hexmode(0)
colnames(train_cols)
for (i in 1:255)
{
    col.name <- paste("TB_0_over_",as.hexidecimal(i),sep="")
    train_cols[,col.name] <- train_cols$TB_0/train_cols[,paste("TB_",as.hexidecimal(i),sep="")]
}
for (i in 1:255)
{
    col.name <- paste("TB_0_over_",as.hexmode(i),sep="")
    train_cols[,col.name] <- train_cols$TB_0/train_cols[,paste("TB_",as.hexmode(i),sep="")]
}
train_cols[is.nan(train_cols)] <- 0
train_cols <- do.call(data.frame,lapply(train_cols, function(x) replace(x, is.infinite(x),0)))
colnames(train_cols)
results$variables[1:30,10:11]
for (i in 1:255)
{
    col.name <- paste("TB_8b_over_",as.hexmode(i),sep="")
    train_cols[,col.name] <- train_cols$TB_8b/train_cols[,paste("TB_",as.hexmode(i),sep="")]
}
train_cols[is.nan(train_cols)] <- 0
train_cols <- do.call(data.frame,lapply(train_cols, function(x) replace(x, is.infinite(x),0)))
warnings()
results <- rfe(train_cols,labels,sizes=c(16,32,64,128),rfeControl=control,metric="LogLoss", maximize=F)
is.factor(train_cols[1])
is.numerical(train_cols[1])
is.numeric(train_cols[1])
is.numeric(train_cols[1,1:100])
is.numeric(train_cols[1,1:50])
is.numeric(train_cols[1,1:30])
is.numeric(train_cols[1,1:10])
is.numeric(train_cols[1,1:1])
is.numeric(train_cols[1,1:3])
is.numeric(train_cols[1,1:2])
train_cols[1,2]
train_cols[1,2:5]
train_cols[1:5,2]
train_cols$file_size
is.numeric(train_cols$file_size)
is.numeric(train_cols[,2])
is.numeric(train_cols[,3])
is.numeric(train_cols[,1:5])
is.numeric(train_cols[,1:3])

sapply(train_cols,is.numeric)
train_cols$order1
testdata$order1
for (i in 1:nrow(train_cols))
{
    train_cols[i,264:519] <- match(two.byte.names, colnames(sort(train_cols[i,4:259], decreasing=T)))
}
sapply(train_cols,is.numeric)
train_cols[,264:519] <- as.numeric(train_cols[,264:519])
train_cols[1,264]
train_cols[1,265]
train_cols[1,260]
train_cols[,264] <- as.numeric(train_cols[,264])
train_cols[,265] <- as.numeric(train_cols[,265])
train_cols[,266] <- as.numeric(train_cols[,266])
train_cols <- sapply(train_cols,as.numeric)
sapply(train_cols,is.numeric)
is.numeric(train_cols)
results <- rfe(train_cols,labels,sizes=c(16,32,64,128),rfeControl=control,metric="LogLoss", maximize=F)
results
results$variables[1:30,10:11]
mod <- train(x=train_cols[results$variables$var[1:30]],y=labels,method="rf",trControl=ctrl, ntree=5001, maximize=F,metric='LogLoss')
train_cols[results$variables$var[1:30]]
train_cols
results$variables$var[1:30]
train_cols["no_que_mark"]
names(train_cols["no_que_mark"]
)
names(train_cols)
colnames(train_cols)
train_cols[,1]
results$variables$var[1]
train_cols[results$variables$var[1]]
train_cols[,results$variables$var[1]]
mod <- train(x=train_cols[,results$variables$var[1:30]],y=labels,method="rf",trControl=ctrl, ntree=5001, maximize=F,metric='LogLoss')
mod
for (i in 1:255)
{
    col.name <- paste("TB_0_over_",as.hexmode(i),sep="")
    testdata[,col.name] <- testdata$TB_0/testdata[,paste("TB_",as.hexmode(i),sep="")]
}
for (i in 1:255)
{
    col.name <- paste("TB_8b_over_",as.hexmode(i),sep="")
    testdata[,col.name] <- testdata$TB_8b/testdata[,paste("TB_",as.hexmode(i),sep="")]
}
testdata[is.nan(testdata)] <- 0
testdata <- do.call(data.frame,lapply(testdata, function(x) replace(x, is.infinite(x),0)))
sapply(testdata,is.numeric)
predictions<-as.data.frame(predict(mod,newdata=testdata, type="prob"))
predictions<-as.data.frame(predict(mod,newdata=testdata[,results$variables$var[1:30]], type="prob"))
submit<-as.data.frame(cbind(test[,1],predictions))
colnames(submit)<-c("Id","Prediction1","Prediction2","Prediction3","Prediction4","Prediction5","Prediction6","Prediction7","Prediction8","Prediction9")
write.csv(submit,format(Sys.time(), "%m-%d_%H:%M_submission.csv"),row.names=FALSE,quote=FALSE)
mod
mod <- train(x=train_cols[,results$variables$var[1:100]],y=labels,method="rf",trControl=ctrl, ntree=5001, maximize=F,metric='LogLoss')
mod
predictions<-as.data.frame(predict(mod,newdata=testdata[,results$variables$var[1:100]], type="prob"))
submit<-as.data.frame(cbind(test[,1],predictions))
colnames(submit)<-c("Id","Prediction1","Prediction2","Prediction3","Prediction4","Prediction5","Prediction6","Prediction7","Prediction8","Prediction9")
write.csv(submit,format(Sys.time(), "%m-%d_%H:%M_submission.csv"),row.names=FALSE,quote=FALSE)
results$variables[1:30,10:11]
control
control$function$fit
control$function
control$method
control$functions
control$functions$fit
control
control$functions$fit
control$functions$fit()
cor.matrix <- cor(train_control)
cor.matrix <- cor(train_cols)
highlyCorrelated <- findCorrelation(cor.matrix, cutoff=0.5)
highlyCorrelated
train_cols2 <- train_cols
train_cols2[highlyCorrelated] <- NULL
train_cols2[highlyCorrelated]
train_cols2 <- train_cols
train_cols2[,highlyCorrelated] <- NULL
train_cols2 <- train_cols
subset(train_cols2,select=-highlyCorrelated)
train_cols2 <- subset(train_cols2,select=-highlyCorrelated)
ncol(train_cols)
ncol(train_cols2)
results <- rfe(train_cols2,labels,sizes=c(16,32,64,128),rfeControl=control,metric="LogLoss", maximize=F)
results
mod <- train(x=train_cols2,y=labels,method="rf",trControl=ctrl, ntree=5001, maximize=F,metric='LogLoss')
mod2 <- train(x=train_cols,y=labels,method="rf",trControl=ctrl,ntree=5001,maximize=F,metric='LogLoss')
mod
train_cols2
head(train_cols2)
q()
