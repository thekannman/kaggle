__author__ = "Silbermann Thierry"
__license__ = "WTFPL"

import matplotlib.pyplot as plt
from os import listdir
from os.path import isfile, join

from sklearn.metrics import log_loss, confusion_matrix
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from sklearn.cross_validation import cross_val_score, KFold

import numpy as np
import os


dt = np.dtype([('Id', 'a30'), ('Class', 'u2')])
data = np.loadtxt("trainLabels.csv", skiprows=1, delimiter = ",", dtype=dt)

X = np.zeros((data.shape[0], 2))
Y = data['Class']


for i, (Id, Class) in enumerate(data):
    X[i][0] = os.path.getsize('train/'+Id[1:-1]+'.asm')
    X[i][1] = os.path.getsize('train/'+Id[1:-1]+'.bytes')

mypath = 'test'
list_files = [ f for f in listdir(mypath) if isfile(join(mypath,f)) ]
set_files = set([ os.path.splitext(el)[0] for el in list_files ])

Id_list = list(set_files) 

X_test = np.zeros(( len(set_files), 2 ))

print X_test.shape

for i, Id in enumerate(Id_list):
    X_test[i][0] = os.path.getsize('test/'+Id+'.asm')
    X_test[i][1] = os.path.getsize('test/'+Id+'.bytes')

################
#     Plot     #
################
 
plt.axis((0,1.6*10**8, 0, 2*10**7))
plt.scatter(X[:,0], X[:,1], c=Y, alpha=0.5)
plt.show()

plt.axis((0,1.6*10**8, 0, 2*10**7))
plt.scatter(X_test[:,0], X_test[:,1], alpha=0.5)
plt.show()

def run_cv(X,y, clf):

    # Construct a kfolds object
    kf = KFold(len(y),n_folds=10,shuffle=True)
    y_prob = np.zeros((len(y),9))
    y_pred = np.zeros(len(y))
    
    # Iterate through folds
    for train_index, test_index in kf:
        X_train, X_test = X[train_index], X[test_index]
        y_train = y[train_index]

        clf.fit(X_train,y_train)
        y_prob[test_index] = clf.predict_proba(X_test)
        y_pred[test_index] = clf.predict(X_test)
    
    return y_prob, y_pred

################
# Get CV score #
################

print "Extra Tree:",
clf1 = ExtraTreesClassifier(n_estimators=2000, max_features=None, min_samples_leaf=1,
        min_samples_split=9, n_jobs=1, criterion='gini')
p2, pred2 = run_cv(X,Y,clf1)
print "%.3f" % log_loss(Y, p2)
cm = confusion_matrix(Y, pred2)
print(cm)

print "Extra Tree:"
clf2 = ExtraTreesClassifier(n_estimators=2000, max_features=None, min_samples_leaf=2,
        min_samples_split=3, n_jobs=1, criterion='gini')
p3, pred3 = run_cv(X,Y,clf2)
print "%.3f" % log_loss(Y, p3)
cm = confusion_matrix(Y, pred3)
print(cm)

print 'Combination:',
p6 = (p2 + p3) / 2.
print "%.3f" % log_loss(Y, p6)

'''
clf = ExtraTreesClassifier(n_estimators=2000, max_features=None, min_samples_leaf=1,
        min_samples_split=9, n_jobs=2, criterion='gini')
clf = ExtraTreesClassifier(n_estimators=2000, max_features=None, min_samples_leaf=2,
        min_samples_split=3, n_jobs=2, criterion='gini') 
Extra Tree: 0.251
[[1353   35    0    4   10   53    6   56   24]
 [  58 2377    0    6    1   25    2    4    5]
 [   0    5 2937    0    0    0    0    0    0]
 [   5   13    0  447    0    5    0    3    2]
 [  18    2    0    0   17    4    0    1    0]
 [  60   19    1    8    2  639    0   20    2]
 [   4    5    0    0    0    0  389    0    0]
 [  94   12    3    7    1   28    2 1076    5]
 [  26    8    0    3    1    5    0    3  967]]
Extra Tree: 0.218
[[1341   42    0    4    9   51    7   64   23]
 [  49 2372    0    8    2   32    2    7    6]
 [   0    4 2937    0    0    1    0    0    0]
 [   5   11    0  448    0    5    0    4    2]
 [  21    4    1    0   13    1    0    2    0]
 [  57   24    2    9    0  634    0   21    4]
 [   2   10    0    0    0    0  386    0    0]
 [  81   17    4    7    0   28    2 1083    6]
 [  25    5    0    3    1    6    0    3  970]]
'''

##################
# Get prediction #
##################

clf1.fit(X, Y)
result1 = clf1.predict_proba(X_test)

clf2.fit(X, Y)
result2 = clf2.predict_proba(X_test)

result = (result1 + result2) / 2.0

w = open("stupid_submission.csv", "w")
w.write('"Id","Prediction1","Prediction2","Prediction3","Prediction4",')
w.write('"Prediction5","Prediction6","Prediction7","Prediction8","Prediction9"\n')
        
assert(len(set_files) == X_test.shape[0])

for i, sample in enumerate(result):
    string = '"%s",%s\n' %(Id_list[i], ','.join(map(str, sample)) )
    w.write(string)

w.close()

