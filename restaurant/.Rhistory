#library('e1071')
library('lubridate')
#library('randomForest')
#library('cvTools')
library('caret')
train <- read.csv("train.csv",header=TRUE)
test <- read.csv("test.csv",header=TRUE)
train$day<-as.factor(day(as.POSIXlt(train$Open.Date, format="%m/%d/%Y")))
train$month<-as.factor(month(as.POSIXlt(train$Open.Date, format="%m/%d/%Y")))
train$year<-as.factor(year(as.POSIXlt(train$Open.Date, format="%m/%d/%Y")))
test$day<-as.factor(day(as.POSIXlt(test$Open.Date, format="%m/%d/%Y")))
test$month<-as.factor(month(as.POSIXlt(test$Open.Date, format="%m/%d/%Y")))
test$year<-as.factor(year(as.POSIXlt(test$Open.Date, format="%m/%d/%Y")))
train$City.Group <- as.numeric(factor(train$City.Group , levels=c("Other" ,
          "Big Cities")))
train$Type <- as.numeric(factor(train$Type), levels=c("DT","IL","FC"))
train$City <- as.numeric(factor(train$City), levels=c("Kırklareli", "Uşak",
                                                        "Denizli","Konya",
                                                        "Tokat","Amasya",
                                                        "Kütahya","Samsun",
                                                        "Şanlıurfa","Kastamonu",
                                                        "Ankara","Tekirdağ",
                                                        "Sakarya","Osmaniye",
                                                        "Aydın","Antalya",
                                                        "Diyarbakır","Kocaeli",
                                                        "Karabük","Eskişehir",
                                                        "Isparta","Bursa",
                                                        "Muğla","Bolu",
                                                        "Gaziantep","Kayseri",
                                                        "Balıkesir","Adana",
                                                        "Afyonkarahisar","Trabzon",
                                                        "İzmir","Edirne",
                                                        "Elazığ","İstanbul"))
test$City.Group <- as.numeric(factor(test$City.Group , levels=c("Other" ,
          "Big Cities")))
test$Type <- as.numeric(factor(test$Type), levels=c("DT","IL","FC"))
test$City <- as.numeric(factor(test$City), levels=c("Kırklareli", "Uşak",
                                                        "Denizli","Konya",
                                                        "Tokat","Amasya",
                                                        "Kütahya","Samsun",
                                                        "Şanlıurfa","Kastamonu",
                                                        "Ankara","Tekirdağ",
                                                        "Sakarya","Osmaniye",
                                                        "Aydın","Antalya",
                                                        "Diyarbakır","Kocaeli",
                                                        "Karabük","Eskişehir",
                                                        "Isparta","Bursa",
                                                        "Muğla","Bolu",
                                                        "Gaziantep","Kayseri",
                                                        "Balıkesir","Adana",
                                                        "Afyonkarahisar","Trabzon",
                                                        "İzmir","Edirne",
                                                        "Elazığ","İstanbul"))
train_cols<-train[,c(3:42,44:46)]
labels<-as.matrix(train[,43])
testdata<-test[,3:45]
train_cols<-train[,c(3:42,44:46)]
labels<-as.matrix(train[,43])
testdata<-test[,3:45]
train_cols <- data.frame(lapply(train_cols,as.numeric))
testdata<-data.frame(lapply(testdata,as.numeric))
plot(train$City,train$Revenue)
plot(train$City,train$Revenue)
plot(train$Revenue ~ train$City)
plot(train$City,train$Revenue)
density(train$city)
density(train$City)
density(train$revenue)
plot(x=train$City,y=train$Revenue)
plot(x=train$City,y=train$Revenue)
plot(x=train$City,y=train$revenue)
plot(x=train$ID,y=train$revenue)
plot(x=train$Id,y=train$revenue)
plot(x=train$Open.Date,y=train$revenue)
plot(x=train$day,y=train$revenue)
plot(x=train$month,y=train$revenue)
plot(x=train$year,y=train$revenue)
train$day[1]
train$day
train$day*30
day(as.POSIXlt(train$Open.Date, format="%m/%d/%Y"))
day(as.POSIXlt(train$Open.Date, format="%m/%d/%Y"))*30
train$day<-day(as.POSIXlt(train$Open.Date, format="%m/%d/%Y"))
train$month<-month(as.POSIXlt(train$Open.Date, format="%m/%d/%Y"))
train$year<-year(as.POSIXlt(train$Open.Date, format="%m/%d/%Y"))
test$day<-day(as.POSIXlt(test$Open.Date, format="%m/%d/%Y"))
test$month<-month(as.POSIXlt(test$Open.Date, format="%m/%d/%Y"))
test$year<-year(as.POSIXlt(test$Open.Date, format="%m/%d/%Y"))
as.POSIXlt(train$Open.Date, format="%m/%d/%Y")
01/01/15 - as.POSIXlt(train$Open.Date, format="%m/%d/%Y")
as.POSIXlt(01/01/15, format="%m/%d/%Y") - as.POSIXlt(train$Open.Date, format="%m/%d/%Y")
as.POSIXlt(01/01/2015, format="%m/%d/%Y") - as.POSIXlt(train$Open.Date, format="%m/%d/%Y")
train$Open.Date
as.POSIXlt('01/01/2015', format="%m/%d/%Y") - as.POSIXlt(train$Open.Date, format="%m/%d/%Y")
train$Open.Date
as.POSIXlt('01/01/2015', format="%m/%d/%Y") - as.POSIXlt(train$Open.Date, format="%m/%d/%Y")
as.POSIXlt(01/01/2015, format="%m/%d/%Y") - as.POSIXlt(train$Open.Date, format="%m/%d/%Y")
as.POSIXlt('01/01/2015', format="%m/%d/%Y") - as.POSIXlt(train$Open.Date, format="%m/%d/%Y")
"as.POSIXlt('01/01/2015', format="%m/%d/%Y") - as.POSIXlt(train$Open.Date, format="%m/%d/%Y")"
as.POSIXlt('01/01/2015', format="%m/%d/%Y") - as.POSIXlt(train$Open.Date, format="%m/%d/%Y")
()
q
q()
#library('e1071')
library('lubridate')
#library('randomForest')
#library('cvTools')
library('caret')
train <- read.csv("train.csv",header=TRUE)
test <- read.csv("test.csv",header=TRUE)
train$day<-day(as.POSIXlt(train$Open.Date, format="%m/%d/%Y"))
train$month<-month(as.POSIXlt(train$Open.Date, format="%m/%d/%Y"))
train$year<-year(as.POSIXlt(train$Open.Date, format="%m/%d/%Y"))
train$days.open <- as.POSIXlt('01/01/2015', format="%m/%d/%Y") - as.POSIXlt(train$Open.Date, format="%m/%d/%Y")
test$day<-day(as.POSIXlt(test$Open.Date, format="%m/%d/%Y"))
test$month<-month(as.POSIXlt(test$Open.Date, format="%m/%d/%Y"))
test$year<-year(as.POSIXlt(test$Open.Date, format="%m/%d/%Y"))
test$days.open <- as.POSIXlt('01/01/2015', format="%m/%d/%Y") - as.POSIXlt(test$Open.Date, format="%m/%d/%Y")
train$City.Group <- as.numeric(factor(train$City.Group , levels=c("Other" ,
          "Big Cities")))
train$Type <- as.numeric(factor(train$Type), levels=c("DT","IL","FC"))
train$City <- as.numeric(factor(train$City), levels=c("Kırklareli", "Uşak",
                                                        "Denizli","Konya",
                                                        "Tokat","Amasya",
                                                        "Kütahya","Samsun",
                                                        "Şanlıurfa","Kastamonu",
                                                        "Ankara","Tekirdağ",
                                                        "Sakarya","Osmaniye",
                                                        "Aydın","Antalya",
                                                        "Diyarbakır","Kocaeli",
                                                        "Karabük","Eskişehir",
                                                        "Isparta","Bursa",
                                                        "Muğla","Bolu",
                                                        "Gaziantep","Kayseri",
                                                        "Balıkesir","Adana",
                                                        "Afyonkarahisar","Trabzon",
                                                        "İzmir","Edirne",
                                                        "Elazığ","İstanbul"))
test$City.Group <- as.numeric(factor(test$City.Group , levels=c("Other" ,
          "Big Cities")))
test$Type <- as.numeric(factor(test$Type), levels=c("DT","IL","FC"))
test$City <- as.numeric(factor(test$City), levels=c("Kırklareli", "Uşak",
                                                        "Denizli","Konya",
                                                        "Tokat","Amasya",
                                                        "Kütahya","Samsun",
                                                        "Şanlıurfa","Kastamonu",
                                                        "Ankara","Tekirdağ",
                                                        "Sakarya","Osmaniye",
                                                        "Aydın","Antalya",
                                                        "Diyarbakır","Kocaeli",
                                                        "Karabük","Eskişehir",
                                                        "Isparta","Bursa",
                                                        "Muğla","Bolu",
                                                        "Gaziantep","Kayseri",
                                                        "Balıkesir","Adana",
                                                        "Afyonkarahisar","Trabzon",
                                                        "İzmir","Edirne",
                                                        "Elazığ","İstanbul"))
train_cols<-train[,c(3:42,44:47)]
labels<-as.matrix(train[,43])
testdata<-test[,3:46]
train_cols <- data.frame(lapply(train_cols,as.numeric))
testdata<-data.frame(lapply(testdata,as.numeric))
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl)
ctrl <- trainControl(method="cv", savePred=T)
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl)
mod
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(50)))
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(50),shrinkage=0.1))
mod
1:10:2
1:10
range(1,10,2)
range(1,2,10)
seq(1,10,2)
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=seq(50,500,50),shrinkage=0.1))
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(seq(50,500,50)),shrinkage=0.1))
seq(1,5,2)
(seq(1,5,2))
1:10
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(seq(50,500,50)),shrinkage=0.1))
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(50,100,150),shrinkage=0.1))
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(50:51),shrinkage=0.1))
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(50),shrinkage=0.1))
mod
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(100),shrinkage=0.1))
mod
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(10000),shrinkage=0.1))
mod
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(100),shrinkage=0.001))
mod
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(50),shrinkage=0.1))
q()
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(50),shrinkage=1))
library('lubridate')
library(caret)
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(50),shrinkage=1))
mod
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:3),n.trees=(50),shrinkage=10))
mod
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(1:5),n.trees=(50),shrinkage=0.001))
mod
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(3),n.trees=(5000),shrinkage=0.001))
mod
mod
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(3),n.trees=(5000),shrinkage=0.00001))
mod
mod <- train(x=as.matrix(train_cols),y=labels,method="gbm",trControl=ctrl, tuneGrid=data.frame(interaction.depth=(3),n.trees=
mod
q()
#library('e1071')
library('lubridate')
#library('randomForest')
#library('cvTools')
library('caret')
library(caretEnsemble)
train <- read.csv("train.csv",header=TRUE)
test <- read.csv("test.csv",header=TRUE)
train$day<-day(as.POSIXlt(train$Open.Date, format="%m/%d/%Y"))
train$month<-month(as.POSIXlt(train$Open.Date, format="%m/%d/%Y"))
train$year<-year(as.POSIXlt(train$Open.Date, format="%m/%d/%Y"))
train$days.open <- as.POSIXlt('01/01/2015', format="%m/%d/%Y") - as.POSIXlt(train$Open.Date, format="%m/%d/%Y")
test$day<-day(as.POSIXlt(test$Open.Date, format="%m/%d/%Y"))
test$month<-month(as.POSIXlt(test$Open.Date, format="%m/%d/%Y"))
test$year<-year(as.POSIXlt(test$Open.Date, format="%m/%d/%Y"))
test$days.open <- as.POSIXlt('01/01/2015', format="%m/%d/%Y") - as.POSIXlt(test$Open.Date, format="%m/%d/%Y")
train$City.Group <- as.numeric(factor(train$City.Group , levels=c("Other" ,
          "Big Cities")))
train$Type <- as.numeric(factor(train$Type), levels=c("DT","IL","FC"))
train$City <- as.numeric(factor(train$City), levels=c("Kırklareli", "Uşak",
                                                        "Denizli","Konya",
                                                        "Tokat","Amasya",
                                                        "Kütahya","Samsun",
                                                        "Şanlıurfa","Kastamonu",
                                                        "Ankara","Tekirdağ",
                                                        "Sakarya","Osmaniye",
                                                        "Aydın","Antalya",
                                                        "Diyarbakır","Kocaeli",
                                                        "Karabük","Eskişehir",
                                                        "Isparta","Bursa",
                                                        "Muğla","Bolu",
                                                        "Gaziantep","Kayseri",
                                                        "Balıkesir","Adana",
                                                        "Afyonkarahisar","Trabzon",
                                                        "İzmir","Edirne",
                                                        "Elazığ","İstanbul"))
test$City.Group <- as.numeric(factor(test$City.Group , levels=c("Other" ,
          "Big Cities")))
test$Type <- as.numeric(factor(test$Type), levels=c("DT","IL","FC"))
test$City <- as.numeric(factor(test$City), levels=c("Kırklareli", "Uşak",
                                                        "Denizli","Konya",
                                                        "Tokat","Amasya",
                                                        "Kütahya","Samsun",
                                                        "Şanlıurfa","Kastamonu",
                                                        "Ankara","Tekirdağ",
                                                        "Sakarya","Osmaniye",
                                                        "Aydın","Antalya",
                                                        "Diyarbakır","Kocaeli",
                                                        "Karabük","Eskişehir",
                                                        "Isparta","Bursa",
                                                        "Muğla","Bolu",
                                                        "Gaziantep","Kayseri",
                                                        "Balıkesir","Adana",
                                                        "Afyonkarahisar","Trabzon",
                                                        "İzmir","Edirne",
                                                        "Elazığ","İstanbul"))
train_cols<-train[,c(3:42,44:47)]
labels<-as.matrix(train[,43])
testdata<-test[,3:46]
train_cols <- data.frame(lapply(train_cols,as.numeric))
testdata<-data.frame(lapply(testdata,as.numeric))
train_cols$Pmax <- apply(train_cols[4:40],1,max)
train_cols$Pmin <- apply(train_cols[4:40],1,min)
train_cols$Pmed <- apply(train_cols[4:40],1,median)
train_cols$Psd <- apply(train_cols[4:40],1,sd)
train_cols$med_over_max <- train_cols$Pmed/train_cols$Pmax
train_cols$min_over_med <- train_cols$Pmin/train_cols$Pmed
train_cols$min_over_max <- train_cols$Pmin/train_cols$Pmax
train_cols$min_over_sd <- train_cols$Pmin/train_cols$Psd
train_cols$sd_over_max <- train_cols$Psd/train_cols$Pmax
train_cols$sd_over_med <- train_cols$Psd/train_cols$Pmed
for (i in 1:37)
{
    col.name <- paste("Porder",i,sep="")
    train_cols[,col.name] <- 0.0
}
P.names <- colnames(train_cols[,4:40])
for (i in 1:nrow(train_cols))
{
    train_cols[i,55:91] <- as.numeric(match(P.names, colnames(sort(train_cols[i,4:40], decreasing=T))))
}
testdata$Pmax <- apply(testdata[4:40],1,max)
testdata$Pmin <- apply(testdata[4:40],1,min)
testdata$Pmed <- apply(testdata[4:40],1,median)
testdata$Psd <- apply(testdata[4:40],1,sd)
testdata$med_over_max <- testdata$Pmed/testdata$Pmax
testdata$min_over_med <- testdata$Pmin/testdata$Pmed
testdata$min_over_max <- testdata$Pmin/testdata$Pmax
testdata$min_over_sd <- testdata$Pmin/testdata$Psd
testdata$sd_over_max <- testdata$Psd/testdata$Pmax
testdata$sd_over_med <- testdata$Psd/testdata$Pmed
for (i in 1:37)
{
    col.name <- paste("Porder",i,sep="")
    testdata[,col.name] <- 0.0
}
P.names <- colnames(testdata[,4:40])
for (i in 1:nrow(testdata))
{
    testdata[i,55:91] <- as.numeric(match(P.names, colnames(sort(testdata[i,4:40], decreasing=T))))
}
train_cols <- data.frame(lapply(train_cols,as.numeric))
testdata<-data.frame(lapply(testdata,as.numeric))
ctrl <- trainControl(method="cv", savePred=T)
method_list = c('gbm','bdk','blackboost','bstLs','gaussprPoly','gcvEarth','kernelpls','kknn','knn','pls','plsRglm','rpart','rpart2','simpls','spls','svmPoly','svmRadial','svmRadialCost','treebag','widekernelpls','xyf','rf','extraTrees')
tuneList = list(rf1=caretModelSpec(method='rf', ntrees=5000),
                et1=caretModelSpec(method='extraTrees', ntrees=5000))
mod <- caretList(x=train_cols,y=as.vector(labels),methodList=method_list,
                 trControl=ctrl, tuneList=tuneList)
warnings()
method_list = c('gbm','bdk','blackboost','bstLs','gaussprPoly','gcvEarth','kernelpls','kknn','knn','pls','plsRglm','rpart','rpart2','simpls','spls','svmPoly','svmRadial','svmRadialCost','treebag','widekernelpls','xyf','rf','extraTrees')
tuneList = list(rf1=caretModelSpec(method='rf', n.trees=5000),
                et1=caretModelSpec(method='extraTrees', n.trees=5000))
mod <- caretList(x=train_cols,y=as.vector(labels),methodList=method_list,
                 trControl=ctrl, tuneList=tuneList)
warnings()
tuneList = list(rf1=caretModelSpec(method='rf', ntree=5000),
                et1=caretModelSpec(method='extraTrees', ntree=5000))
mod <- caretList(x=train_cols,y=as.vector(labels),methodList=method_list,
                 trControl=ctrl, tuneList=tuneList)
tuneList = list(rf1=caretModelSpec(method='rf', ntree=1000),
                et1=caretModelSpec(method='extraTrees', ntree=1000))
mod <- caretList(x=train_cols,y=as.vector(labels),methodList=method_list,
                 trControl=ctrl, tuneList=tuneList)
mod <- caretList(x=train_cols,y=as.vector(labels),methodList=method_list)
nid
mod
library(party)
install.packages('party')
mod <- caretList(x=train_cols,y=as.vector(labels),methodList=method_list)
mod
greedy_ensemble <- caretEnsemble(mod
)
greedy_ensemble <- caretEnsemble(mod)
mod
mod <- caretList(x=train_cols,y=as.vector(labels),methodList=method_list,
                 trControl=ctrl, tuneList=tuneList)
greedy_ensemble <- caretEnsemble(mod)
trControlCheck(ctrl, labels)
library(caretEnsemble)
trControlCheck(ctrl, labels)
resamples
ctrl <- trainControl(method="cv", savePred=T, index=createResample(training$Class, 25))
ctrl <- trainControl(method="cv", savePred=T, index=createResample(labels, 25))
mod <- caretList(x=train_cols,y=as.vector(labels),methodList=method_list,
                 trControl=ctrl, tuneList=tuneList)
greedy_ensemble <- caretEnsemble(mod)
mod$gbm$resample
mod$rf1$resample
mod$et1$resample
mod$
mod$
mod$bstLs$resample
mod$gaussprPoly$resample
mod$gcvEarth$resample
mod$kernelpls$resample
length(mod$kernelpls$)
mod['Resample']
mod$kknn$resample
mod$knn$resample
mod$pls$resample
mod$plsRglm$resample
mod$plsRglm <- NULL
greedy_ensemble <- caretEnsemble(mod)
summary(greedy_ensemble)
predictions<-as.data.frame(predict(greedy_ensemble,newdata=testdata))
submit<-as.data.frame(cbind(test[,1],predictions))
colnames(submit)<-c("Id","Prediction")
write.csv(submit,format(Sys.time(), "%m-%d_%H:%M_submission.csv"),row.names=FALSE,quote=FALSE)
greedy_ensemble$model
greedy_ensemble$models
mod$treebag
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="treebag",trControl=ctrl, nbagg=1)
mod
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="treebag",trControl=ctrl, nbagg=1)

mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="treebag",trControl=ctrl, nbagg=10)
mod
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="treebag",trControl=ctrl, nbagg=100)
mod
summary(greedy_ensemble)
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="spls",trControl=ctrl)
mod
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="spls",trControl=ctrl, kappa=0.25)
mod
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="spls",trControl=ctrl, kappa=0.75)
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="spls",trControl=ctrl, kappa=0.5)
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="spls",trControl=ctrl)
mod
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="spls",trControl=ctrl,K=1)
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="spls",trControl=ctrl, classifier='log)
warnings()
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="spls",trControl=ctrl,select='simpls')
mod
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="spls",trControl=ctrl)
mod
mod <- train(x=as.matrix(train_cols),y=as.vector(labels),method="spls",trControl=ctrl,select='simpls',trace=T)
method_list = c('gbm','bdk','blackboost','bstLs','gaussprPoly','gcvEarth','kernelpls','kknn','knn','pls','rpart','rpart2','simpls','spls','svmPoly','svmRadial','svmRadialCost','treebag','widekernelpls','xyf','rf','extraTrees')
tuneList = list(rf1=caretModelSpec(method='rf', ntree=1000),
                et1=caretModelSpec(method='extraTrees', ntree=1000),
                bag1=caretModelSpec(method='treebag1', nbagg=500),
                bag2=caretModelSpec(method='treebag1', nbagg=1000),
                spls1=caretModelSpec(method='spls', select='simpls'))
mod <- caretList(x=train_cols,y=as.vector(labels),methodList=method_list,
                 trControl=ctrl, tuneList=tuneList)
tuneList = list(rf1=caretModelSpec(method='rf', ntree=1000),
                et1=caretModelSpec(method='extraTrees', ntree=1000),
                bag1=caretModelSpec(method='treebag', nbagg=500),
                bag2=caretModelSpec(method='treebag', nbagg=1000),
                spls1=caretModelSpec(method='spls', select='simpls'))
mod <- caretList(x=train_cols,y=as.vector(labels),methodList=method_list,
                 trControl=ctrl, tuneList=tuneList)
summary(greedy_ensemble)
greedy_ensemble <- caretEnsemble(mod)
summary(greedy_ensemble)
q()
